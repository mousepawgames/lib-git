# set 1 to enable Lua binding, 0 to disable
set(HAS_LUA	0) #release=false

# set 1 to enable Google V8 binding, 0 to disable
set(HAS_V8 0) #release=false

# set 1 to enable Python binding, 0 to disable
set(HAS_PYTHON 0) #release=false

# set 1 to enable Mozilla SpiderMonkey binding, 0 to disable
set(HAS_SPIDERMONKEY 0) #release=false

# set 1 to enable unit tests.
# it requires UnitTest++ installed.
set(HAS_UNITTEST 0) #release=false

# set 1 to enable Boost library, 0 to disable. This is only used in unit test.
set(HAS_BOOST 0) #release=false

# whether we have GLUT library
set(HAS_GLUT 0) #release=false

### Samples config

# whether we have Box2D library
# this value is not used in library, only used in samples
set(HAS_BOX2D 0) #release=false

# whether we have SFML library
# this value is not used in library, only used in samples
set(HAS_SFML 0) #release=false

# whether we have irrlicht library
# this value is not used in library, only used in samples
set(HAS_IRRLICHT 0) #release=false

set(LIB_SHARED 0)

set(TEST_GCOV 0)
if(UNIX)
	# disable gcov on Linux, otherwise, valgrind will become super slow.
	set(TEST_GCOV 0)
endif(UNIX)

# Enforce C++11
set(CMAKE_CXX_STANDARD 11)

set(MSVC_OPTIMIZED_COMPILE_FLAGS "-bigobj -W3 -O2 -Oy")
set(MSVC_DEBUG_COMPILE_FLAGS "-bigobj -W3 -Od")
set(MSVC_OPTIMIZED_LINK_FLAGS " ")
set(MSVC_DEBUG_LINK_FLAGS " ")

set(GCC_OPTIMIZED_COMPILE_FLAGS "-Wall -Wextra -Wundef -O3")
set(GCC_DEBUG_COMPILE_FLAGS "-Wall -Wextra -Wundef -O0")
set(GCC_OPTIMIZED_LINK_FLAGS " ")
set(GCC_DEBUG_LINK_FLAGS " ")

set(GCC_LIKE 0)
if(CMAKE_COMPILER_IS_GNUCC OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
	set(GCC_LIKE 1)
endif()

# an empty CMAKE_BUILD_TYPE is confusing, so we always set a default one
if("${CMAKE_BUILD_TYPE}" STREQUAL "")
	set(CMAKE_BUILD_TYPE Release)
endif()


### Unit test config

set(UNIT_TEST_DIR
	E:/source/unittest++
)


### Lua config

if(${HAS_LUA})
	find_package(Lua51)

	if(LUA_INCLUDE_DIR)
		message(STATUS "Found Lua")
		set(LUA_INC ${LUA_INCLUDE_DIR})
		set(LUA_LIB ${LUA_LIBRARIES})
	else()

		message(STATUS "Using configured Lua settings")
		set(LUA_DIR
			E:/source/lua-5.3.4
		)

		set(LUA_INC ${LUA_DIR}/src/ ${LUA_DIR}/etc/)

		set(LUA_LIB ${LUA_DIR}/src/liblua.a)

		if(MSVC)
			set(LUA_LIB ${LUA_DIR}/src/lua.lib)
		endif()

		if(UNIX)
			set(LUA_LIB ${LUA_LIB} "dl")
		endif()
	endif()
endif()


### V8 config

if(${HAS_V8})
	set(V8_DIR
		c:/source/v8
	)

	set(V8_INC ${V8_DIR}/include)

	if(MSVC)
		set(V8_LIB ${V8_DIR}/v8.lib)
	else()
		set(V8_LIB ${V8_DIR}/libv8.so)
	endif()

endif()



### Python config

if(${HAS_PYTHON})
	FIND_PACKAGE(PythonLibs)

	if(PYTHON_INCLUDE_DIR)
		set(PYTHON_INC ${PYTHON_INCLUDE_DIR})
		set(PYTHON_LIB ${PYTHON_LIBRARY})
	else()
		set(PYTHON_DIR
			c:/source/Python
		)

		set(PYTHON_INC ${PYTHON_DIR}/include)

		if(MSVC)
			set(PYTHON_LIB
				debug ${PYTHON_DIR}/libs/python27_d.lib
				optimized ${PYTHON_DIR}/libs/python27.lib
			)
	    else()
			set(PYTHON_LIB ${PYTHON_DIR}/libs/libpython27.a)
		endif()
	endif()
endif()



### SpiderMonkey config

if(${HAS_SPIDERMONKEY})
	set(SPIDERMONKEY_DIR
		c:/source/xulrunner-sdk
	)

	set(SPIDERMONKEY_INC ${SPIDERMONKEY_DIR}/include/)

	if(MSVC)
		set(SPIDERMONKEY_LIB ${SPIDERMONKEY_DIR}/lib/mozjs.lib)
		set(SPIDERMONKEY_DEFINE -DXP_WIN)
	else(MSVC)
		set(SPIDERMONKEY_LIB ${SPIDERMONKEY_DIR}/lib/lib.a)
		set(SPIDERMONKEY_DEFINE )
	endif(MSVC)
endif()



### glut config

if(MSVC)
	set(GLUT_DIR
		/source/freeglut/vc
	)
	set(GLUT_LIB ${GLUT_DIR}/lib/freeglut.lib)
else()
	set(GLUT_DIR
		/source/freeglut
	)
	set(GLUT_LIB ${GLUT_DIR}/lib/libfreeglut.a opengl32 glu32)
endif()

set(GLUT_INC ${GLUT_DIR}/include)



### Box2D config

set(BOX2D_DIR
	c:/source/Box2D/Box2D
)

if(MSVC)
	set(BOX2D_LIB ${BOX2D_DIR}/lib/Box2D.lib)
else(MSVC)
	set(BOX2D_LIB ${BOX2D_DIR}/lib/libBox2D.a)
endif(MSVC)

set(BOX2D_INC ${BOX2D_DIR}/)




### SFML config

set(SFML_DIR
	c:/source/SFML-1.6
)

if(MSVC)
	set(SFML_LIB_DIR ${SFML_DIR}/lib/vc2008)
	set(SFML_LIB
		${SFML_LIB_DIR}/sfml-audio-d.lib
		${SFML_LIB_DIR}/sfml-graphics-d.lib
		${SFML_LIB_DIR}/sfml-network-d.lib
		${SFML_LIB_DIR}/sfml-system-d.lib
		${SFML_LIB_DIR}/sfml-window-d.lib
	)
else(MSVC)
	set(SFML_LIB_DIR ${SFML_DIR}/lib/gcc)
	set(SFML_LIB
		${SFML_LIB_DIR}/libsfml-audio-d.a
		${SFML_LIB_DIR}/libsfml-graphics-d.a
		${SFML_LIB_DIR}/libsfml-network-d.a
		${SFML_LIB_DIR}/libsfml-system-d.a
		${SFML_LIB_DIR}/libsfml-window-d.a
	)
endif(MSVC)

set(SFML_INC ${SFML_DIR}/include)


### irrlicht config

set(IRRLICHT_DIR
	c:/source/irrlicht-1.8
)

if(MSVC)
	set(IRRLICHT_LIB_DIR ${IRRLICHT_DIR}/lib/Win32-visualstudio)
	set(IRRLICHT_LIB ${IRRLICHT_LIB_DIR}/Irrlicht.lib)
else(MSVC)
endif(MSVC)

set(IRRLICHT_INC ${IRRLICHT_DIR}/include)


### Boost config

set(BOOST_DIR
	c:/source/boost
)

set(BOOST_INC ${BOOST_DIR})
