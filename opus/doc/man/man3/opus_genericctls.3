.TH "opus_genericctls" 3 "Thu Jan 12 2017" "Version 1.1.3" "Opus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
opus_genericctls \- Generic CTLs
.PP
These macros are used with the \fCopus_decoder_ctl\fP and \fCopus_encoder_ctl\fP calls to generate a particular request\&.  

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBOPUS_RESET_STATE\fP"
.br
.RI "\fIResets the codec state to be equivalent to a freshly initialized state\&. \fP"
.ti -1c
.RI "#define \fBOPUS_GET_FINAL_RANGE\fP(x)"
.br
.RI "\fIGets the final state of the codec's entropy coder\&. \fP"
.ti -1c
.RI "#define \fBOPUS_GET_BANDWIDTH\fP(x)"
.br
.RI "\fIGets the encoder's configured bandpass or the decoder's last bandpass\&. \fP"
.ti -1c
.RI "#define \fBOPUS_GET_SAMPLE_RATE\fP(x)"
.br
.RI "\fIGets the sampling rate the encoder or decoder was initialized with\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
These macros are used with the \fCopus_decoder_ctl\fP and \fCopus_encoder_ctl\fP calls to generate a particular request\&. 

When called on an \fCOpusDecoder\fP they apply to that particular decoder instance\&. When called on an \fCOpusEncoder\fP they apply to the corresponding setting on that encoder instance, if present\&.
.PP
Some usage examples:
.PP
.PP
.nf
int ret;
opus_int32 pitch;
ret = opus_decoder_ctl(dec_ctx, OPUS_GET_PITCH(&pitch));
if (ret == OPUS_OK) return ret;

opus_encoder_ctl(enc_ctx, OPUS_RESET_STATE);
opus_decoder_ctl(dec_ctx, OPUS_RESET_STATE);

opus_int32 enc_bw, dec_bw;
opus_encoder_ctl(enc_ctx, OPUS_GET_BANDWIDTH(&enc_bw));
opus_decoder_ctl(dec_ctx, OPUS_GET_BANDWIDTH(&dec_bw));
if (enc_bw != dec_bw) {
  printf("packet bandwidth mismatch!\n");
}
.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBOpus Encoder\fP, \fBopus_decoder_ctl\fP, \fBopus_encoder_ctl\fP, \fBDecoder related CTLs\fP, \fBEncoder related CTLs\fP 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define OPUS_GET_BANDWIDTH(x)"

.PP
Gets the encoder's configured bandpass or the decoder's last bandpass\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_BANDWIDTH\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Returns one of the following values: 
.IP "\fB\fBOPUS_AUTO\fP \fP" 1c
(default) 
.IP "\fB\fBOPUS_BANDWIDTH_NARROWBAND\fP \fP" 1c
4 kHz passband 
.IP "\fB\fBOPUS_BANDWIDTH_MEDIUMBAND\fP \fP" 1c
6 kHz passband 
.IP "\fB\fBOPUS_BANDWIDTH_WIDEBAND\fP \fP" 1c
8 kHz passband 
.IP "\fB\fBOPUS_BANDWIDTH_SUPERWIDEBAND\fP\fP" 1c
12 kHz passband 
.IP "\fB\fBOPUS_BANDWIDTH_FULLBAND\fP \fP" 1c
20 kHz passband 
.PP
.RE
.PP

.SS "#define OPUS_GET_FINAL_RANGE(x)"

.PP
Gets the final state of the codec's entropy coder\&. This is used for testing purposes, The encoder and decoder state should be identical after coding a payload (assuming no data corruption or software bugs)
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_uint32 *\fP: Entropy coder state 
.RE
.PP

.SS "#define OPUS_GET_SAMPLE_RATE(x)"

.PP
Gets the sampling rate the encoder or decoder was initialized with\&. This simply returns the \fCFs\fP value passed to \fBopus_encoder_init()\fP or \fBopus_decoder_init()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Sampling rate of encoder or decoder\&. 
.RE
.PP

.SS "#define OPUS_RESET_STATE"

.PP
Resets the codec state to be equivalent to a freshly initialized state\&. This should be called when switching streams in order to prevent the back to back decoding from giving different results from one at a time decoding\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Opus from the source code\&.
