set(TARGET_UNITTEST tests)
set(OUTNAME_UNITTEST test)

if(GCC_LIKE)
	if(TEST_GCOV)
		set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")
	endif(TEST_GCOV)

endif()

### unit test

if((not DEFINED UNIT_TEST_DIR) OR (UNIT_TEST_DIR STREQUAL ""))
	set(HAS_UNITTEST 0)
endif((not DEFINED UNIT_TEST_DIR) OR (UNIT_TEST_DIR STREQUAL ""))

if(${HAS_UNITTEST})
	find_file(UTEST_EXIST
		NAMES "UnitTest++.h"
		PATHS ${UNIT_TEST_DIR}/src NO_DEFAULT_PATH
	)

	if(${UTEST_EXIST} STREQUAL "UTEST_EXIST-NOTFOUND")
		set(HAS_UNITTEST 0)

		message(WARNING "Can't find UnitTest++ in ${UNIT_TEST_DIR}")
	endif(${UTEST_EXIST} STREQUAL "UTEST_EXIST-NOTFOUND")
endif(${HAS_UNITTEST})

macro(globAndAppendFiles fileList)
	set(globAndAppendFiles_patterns ${ARGN})
	file(GLOB tempFileList ${globAndAppendFiles_patterns})
	list(APPEND ${fileList} ${tempFileList})
endmacro()

macro(partUnitTest target)
	set(partUnitTest_patterns ${ARGN})

	set(UNITTEST_FRAMEWORK_SUBDIR Posix)
	if(WIN32)
		set(UNITTEST_FRAMEWORK_SUBDIR Win32)
	endif(WIN32)

	set(fileList ${TEST_PATH}/testmain.cpp)

	globAndAppendFiles(fileList
		${UNIT_TEST_DIR}/src/*.cpp
		${UNIT_TEST_DIR}/src/${UNITTEST_FRAMEWORK_SUBDIR}/*.cpp
	)

	globAndAppendFiles(fileList ${partUnitTest_patterns})

	add_executable(
		${target}
		EXCLUDE_FROM_ALL
			${fileList}
	)

	set_target_properties(
		${target}
		PROPERTIES
		OUTPUT_NAME ${target}
		COMPILE_DEFINITIONS "ENABLE_LUA=${HAS_LUA};ENABLE_V8=${HAS_V8};ENABLE_PYTHON=${HAS_PYTHON};ENABLE_SPIDERMONKEY=${HAS_SPIDERMONKEY};ENABLE_BOOST=${HAS_BOOST}"
	)
	target_link_libraries(${target} ${TARGET_LIB} ${LUA_LIB} ${V8_LIB} ${PYTHON_LIB} ${SPIDERMONKEY_LIB} )
endmacro()

if(${HAS_UNITTEST})
	set(GLOB_TEST_LUA )
	set(GLOB_METATEST_LUA )
	if(HAS_LUA)
		globAndAppendFiles(GLOB_TEST_LUA
			${TEST_PATH}/scriptbind/luabind/*.cpp
		)
		globAndAppendFiles(GLOB_METATEST_LUA
			${TEST_PATH}/metagen/tests/luatests/*.cpp
		)
	endif(HAS_LUA)

	set(GLOB_TEST_V8 )
	set(GLOB_METATEST_V8 )
	if(HAS_V8)
		globAndAppendFiles(GLOB_TEST_V8
			${TEST_PATH}/scriptbind/v8bind/*.cpp
		)
		globAndAppendFiles(GLOB_METATEST_V8
			${TEST_PATH}/metagen/tests/v8tests/*.cpp
		)
	endif(HAS_V8)

	set(GLOB_TEST_PYTHON )
	set(GLOB_METATEST_PYTHON )
	if(HAS_PYTHON)
		globAndAppendFiles(GLOB_TEST_PYTHON
			${TEST_PATH}/scriptbind/pythonbind/*.cpp
		)
		globAndAppendFiles(GLOB_METATEST_PYTHON
			${TEST_PATH}/metagen/tests/pythontests/*.cpp
		)
	endif(HAS_PYTHON)

	set(GLOB_TEST_SPIDERMONKEY )
	set(GLOB_METATEST_SPIDERMONKEY )
	if(HAS_SPIDERMONKEY)
		globAndAppendFiles(GLOB_TEST_SPIDERMONKEY
			${TEST_PATH}/scriptbind/spidermonkeybind/*.cpp
		)
		globAndAppendFiles(GLOB_METATEST_SPIDERMONKEY
			${TEST_PATH}/metagen/tests/spidermonkeytests/*.cpp
		)
	endif(HAS_SPIDERMONKEY)

	partUnitTest("test_misc"
		${TEST_PATH}/misc/*.cpp
	)

	partUnitTest("test_callback"
		${TEST_PATH}/callback/*.cpp
	)

	partUnitTest("test_variant"
		${TEST_PATH}/variant/*.cpp
	)

	partUnitTest("test_temp"
		${TEST_PATH}/temp/*.cpp
	)

	partUnitTest("test_accessor"
		${TEST_PATH}/accessor/*.cpp
	)

	partUnitTest("test_tween"
		${TEST_PATH}/tween/*.cpp
	)

	partUnitTest("test_reflection"
		${TEST_PATH}/reflection/*.cpp
	)

	partUnitTest("test_scriptbind"
		${TEST_PATH}/scriptbind/*.cpp
		${TEST_PATH}/scriptbind/general/*.cpp

		${GLOB_TEST_LUA}
		${GLOB_TEST_V8}
		${GLOB_TEST_PYTHON}
		${GLOB_TEST_SPIDERMONKEY}
	)

	partUnitTest("test_metadata_stl"
		${TEST_PATH}/scriptbind/*.cpp
		${TEST_PATH}/scriptbind/metadata/stl/*.cpp
	)

	partUnitTest("test_serialization"
		${TEST_PATH}/serialization/*.cpp
	)

	partUnitTest("test_metagen"
		${TEST_PATH}/scriptbind/bind_common.cpp

		${TEST_PATH}/metagen/tests/*.cpp
		${TEST_PATH}/metagen/src/*.cpp
		${TEST_PATH}/metagen/metadata/src/*.cpp

		${GLOB_METATEST_LUA}
		${GLOB_METATEST_V8}
		${GLOB_METATEST_SPIDERMONKEY}
		${GLOB_METATEST_PYTHON}
	)

	if(HAS_LUA LESS 1)
		message(WARNING "Can't find Lua for unit test. Unit test will not include Lua binding test.")
	endif(HAS_LUA LESS 1)

	set(UNITTEST_FRAMEWORK_SUBDIR Posix)

	if(WIN32)
		set(UNITTEST_FRAMEWORK_SUBDIR Win32)
	endif(WIN32)

	globAndAppendFiles(SRC_UNITTEST_FRAMEWORK
		${UNIT_TEST_DIR}/src/*.cpp
		${UNIT_TEST_DIR}/src/${UNITTEST_FRAMEWORK_SUBDIR}/*.cpp
	)

	globAndAppendFiles(GLOB_TEST_SRC
		${TEST_PATH}/accessor/*.cpp
		${TEST_PATH}/callback/*.cpp
		${TEST_PATH}/misc/*.cpp
		${TEST_PATH}/variant/*.cpp
		${TEST_PATH}/reflection/*.cpp
		${TEST_PATH}/scriptbind/*.cpp
		${TEST_PATH}/scriptbind/general/*.cpp
		${TEST_PATH}/scriptbind/metadata/*.cpp
		${TEST_PATH}/scriptbind/metadata/stl/*.cpp
		${GLOB_TEST_LUA}
		${GLOB_TEST_V8}
		${GLOB_TEST_PYTHON}
		${GLOB_TEST_SPIDERMONKEY}

		${TEST_PATH}/serialization/*.cpp
		${TEST_PATH}/tween/*.cpp

		# metagen
		${TEST_PATH}/metagen/tests/*.cpp
		${TEST_PATH}/metagen/src/*.cpp
		${TEST_PATH}/metagen/metadata/src/*.cpp
		
		${GLOB_METATEST_LUA}
		${GLOB_METATEST_V8}
		${GLOB_METATEST_SPIDERMONKEY}
		${GLOB_METATEST_PYTHON}
	)

	set(SRC_TEST_SRC
		${TEST_PATH}/testmain.cpp

		${GLOB_TEST_SRC}

		${GLOB_TEST_LUA}
		${GLOB_TEST_V8}
		${GLOB_TEST_PYTHON}

		${SRC_UNITTEST_FRAMEWORK}
	)

	include_directories(${UNIT_TEST_DIR}/src)

	if(${HAS_BOOST})
		include_directories(${BOOST_INC})
	endif(${HAS_BOOST})


	add_executable(
		${TARGET_UNITTEST}
		EXCLUDE_FROM_ALL
		${SRC_TEST_SRC}
	)

	target_link_libraries(${TARGET_UNITTEST} ${TARGET_LIB})

	if(CMAKE_COMPILER_IS_GNUCC)
		if(TEST_GCOV)
			target_link_libraries(${TARGET_UNITTEST} gcov)
		endif(TEST_GCOV)
	endif(CMAKE_COMPILER_IS_GNUCC)

	if(HAS_LUA)
		target_link_libraries(${TARGET_UNITTEST} ${LUA_LIB})
	endif(HAS_LUA)
	if(HAS_V8)
		target_link_libraries(${TARGET_UNITTEST} ${V8_LIB})
	endif(HAS_V8)
	if(HAS_PYTHON)
		target_link_libraries(${TARGET_UNITTEST} ${PYTHON_LIB})
	endif(HAS_PYTHON)
	if(HAS_SPIDERMONKEY)
		target_link_libraries(${TARGET_UNITTEST} ${SPIDERMONKEY_LIB})
	endif(HAS_SPIDERMONKEY)

	set_target_properties(
		${TARGET_UNITTEST}
		PROPERTIES
		OUTPUT_NAME ${OUTNAME_UNITTEST}
		COMPILE_DEFINITIONS "ENABLE_LUA=${HAS_LUA};ENABLE_V8=${HAS_V8};ENABLE_PYTHON=${HAS_PYTHON};ENABLE_SPIDERMONKEY=${HAS_SPIDERMONKEY};ENABLE_BOOST=${HAS_BOOST}"
	)

endif(${HAS_UNITTEST})

